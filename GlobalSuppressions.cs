// This file is used by Code Analysis to maintain SuppressMessage
// attributes that are applied to this project.
// Project-level suppressions either have no target or are given
// a specific target and scoped to a namespace, type, member, etc.

using System.Diagnostics.CodeAnalysis;

[assembly: SuppressMessage("Maintainability", "AV1506:File should be named in Pascal casing without underscores or generic arity.", Justification = "Okay, so we what? Put multiple types in the same file? No! That's even worse for maintainability!")]
[assembly: SuppressMessage("Design", "MA0048:File name must match type name", Justification = "We're intentionally splitting these up based on method name, since there's a large amount of method overloads in some cases.")]
[assembly: SuppressMessage("Style", "CC0001:You should use 'var' whenever possible.", Justification = "Absolutely not. Explicit typing yields far better maintainability.")]
[assembly: SuppressMessage("Design", "CA1032:Implement standard exception constructors", Justification = "Any argument exception formats the message in a specific way, ensuring consistent output. Exluding the parameterless constructor helps will keeping people from throwing an exception about an argument with no information about the argument.")]
[assembly: SuppressMessage("Design", "RCS1194:Implement exception constructors.", Justification = "Any argument exception formats the message in a specific way, ensuring consistent output. Exluding the parameterless constructor helps will keeping people from throwing an exception about an argument with no information about the argument.")]
[assembly: SuppressMessage("Usage", "MA0015:Specify the parameter name", Justification = "There isn't a single analyzer that's going to understand the exception pattern occuring here.")]
[assembly: SuppressMessage("Class Design", "AV1010:Member hides inherited member", Justification = "This is fine in certain situations and even part of a pattern at times; whether this is acceptable or not has to be assessed by human reviewer.")]
[assembly: SuppressMessage("Major Code Smell", "S907:\"goto\" statement should not be used", Justification = "Then implement better control structures.")]
[assembly: SuppressMessage("Class Design", "AV1008:Class should not be static", Justification = "Oh, everything that isn't explicit object-oriented is badly designed code is it? There's massive bodies of design research that disagrees. So do my previously gathered benchmarks.")]
[assembly: SuppressMessage("Layout", "AV2407:Region should be removed", Justification = "I would LOVE to see someone develop a very complex system without ever resorting to regions or partial classes. Above a certain threshold these actually help maintainability, and we're well above that threshold.")]
[assembly: SuppressMessage("Naming", "AV1706:Identifier contains an abbreviation or is too short", Justification = "When this fits with a convention, such as i/j for iteration variables, or n for node traversal, this is acceptable. Ideally this analyzer would be convention aware, but since it isn't a human has to review this.")]
[assembly: SuppressMessage("Maintainability", "AV1500:Member or local function contains too many statements", Justification = "This is entirely dependent on cognitive complexity and functional boundaries, not SLOC; a human must review this.")]
[assembly: SuppressMessage("Style", "CC0105:You should use 'var' whenever possible.", Justification = "Absolutely not.")]
[assembly: SuppressMessage("Maintainability", "AV1562:Do not declare a parameter as ref or out", Justification = "This depends so much on what data is actually being worked with. Oftentimes, yes, a fully declared object should be returned. However sometimes you have loosely coupled data that's relevant only for a particular operation. These can also be very important for performance reasons. A human has to review appropriate calling convetions.")]
[assembly: SuppressMessage("Maintainability", "AV1522:Assign each property, field, parameter or variable in a separate statement", Justification = "I don't necessarily have a problem with this, but it depends how much is going on. Other than increment/decrement this generally won't be tollerated.")]
[assembly: SuppressMessage("Naming", "CA1720:Identifier contains type name", Justification = "If this is because the method conceptually only works on that type, and the type is either the caller or primary, this is acceptable.")]
[assembly: SuppressMessage("Maintainability", "AV1564:Parameter in public or internal member is of type bool or bool?", Justification = "This should be qualified at the call site, which plenty of common analyzers rightfully point out.")]
[assembly: SuppressMessage("Naming", "AV1710:Member name includes the name of its containing type", Justification = "Depends entirely on language and requires a human reviewer.")]
[assembly: SuppressMessage("Usage", "CC0057:Unused parameters", Justification = "Completely agree with the point of this analyzer, however it is broken and reports a huge number of false negatives. Other analyzers are included which do this without the false negatives.")]
[assembly: SuppressMessage("Maintainability", "AV1535:Missing block in case or default clause of switch statement", Justification = "Who does this? Who uses this? I've never seen this in my life. switch-case statements already have each case block delimited, adding a generic block accomplishes nothing.")]
[assembly: SuppressMessage("Maintainability", "AV1551:Method overload should call another overload", Justification = "In most cases we do exactly this, and the analyzer doesn't understand it. Furthermore, even in cases where it can tell this is what's going on, it will complain about the one method that actually implements something. Why? IF all any overload does is call another overload, you have a call cycle and will blow the stack. As such, this analyzer is flawed and has to be assessed by a human.")]
[assembly: SuppressMessage("Design", "CA1043:Use Integral Or String Argument For Indexers", Justification = "Indexer types are carefully chosen for the situation, and are often nint or Range, which are still integral types. String is actually avoided in most cases, as string-typing is a highly error prone and vulnerable technique.")]
[assembly: SuppressMessage("Design", "CA1033:Interface methods should be callable by child types", Justification = "I don't expect analyzers to recognize the pattern being used. The methods are still callable by children.")]
[assembly: SuppressMessage("Member Design", "AV1130:Return type in method signature should be a collection interface instead of a concrete type", Justification = "While I agree in most cases, devirtualization is a completely justified exception to this, as it avoids heap allocations. This is especially true with compiler duck-typing such as with enumerators. A human has to review this.")]
[assembly: SuppressMessage("Style", "MA0071:Avoid using redundant else", Justification = "I'm leaving this up to being case specific. I can see it either way.")]
[assembly: SuppressMessage("Maintainability", "AV1561:Signature contains too many parameters", Justification = "Because sometimes it needs to. The cases where this are true are twofold. One is that it's an internal API in which case this doesn't matter. Two is that it's a public API with more simplified overloads that default much of the behavior.")]
[assembly: SuppressMessage("Maintainability", "AV1555:Avoid using non-(nullable-)boolean named arguments", Justification = "While I agree with the 'way too overloaded' premise this analyzer is relying on, it's remarkably naive in thinking that's the only situation named arguments would ever be used. Clarity should always be encouraged, with human review assessing badly designed API's.")]
